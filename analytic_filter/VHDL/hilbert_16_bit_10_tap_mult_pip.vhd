-- -------------------------------------------------------------
--
-- Module: hilbert_filter
--
-- Generated by MATLAB(R) 7.4 and the Filter Design HDL Coder 2.0.
--
-- Generated on: 2007-06-26 21:48:30
--
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- FIRAdderStyle: tree
-- OptimizeForHDL: on
-- CastBeforeSum: off
-- TargetDirectory: G:\svn\PLDWORK\LIB\analytic_filter\VHDL
-- AddPipelineRegisters: on
-- Name: hilbert_filter
-- TestBenchStimulus: chirp impulse noise ramp step 
--
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 11
-- Stable            : Yes
-- Linear Phase      : Yes (Type 3)
-- Arithmetic        : fixed
-- Numerator         : s16,15 -> [-1 1)
-- Input             : s16,15 -> [-1 1)
-- Filter Internals  : Specify Precision
--   Output          : s16,10 -> [-32 32)
--   Product         : s32,30 -> [-2 2)
--   Accumulator     : s40,30 -> [-512 512)
--   Round Mode      : convergent
--   Overflow Mode   : saturate
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY hilbert_filter IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         filter_out                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En10
         );

END hilbert_filter;


----------------------------------------------------------------
--Module Architecture: hilbert_filter
----------------------------------------------------------------
ARCHITECTURE rtl OF hilbert_filter IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(15 DOWNTO 0); -- sfix16_En15
  TYPE sumdelay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(39 DOWNTO 0); -- sfix40_En30
  -- Constants
  CONSTANT coeff1                         : signed(15 DOWNTO 0) := to_signed(-3397, 16); -- sfix16_En15
  CONSTANT coeff2                         : signed(15 DOWNTO 0) := to_signed(-52, 16); -- sfix16_En15
  CONSTANT coeff3                         : signed(15 DOWNTO 0) := to_signed(-5776, 16); -- sfix16_En15
  CONSTANT coeff4                         : signed(15 DOWNTO 0) := to_signed(-26, 16); -- sfix16_En15
  CONSTANT coeff5                         : signed(15 DOWNTO 0) := to_signed(-17501, 16); -- sfix16_En15
  CONSTANT coeff6                         : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15
  CONSTANT coeff7                         : signed(15 DOWNTO 0) := to_signed(17501, 16); -- sfix16_En15
  CONSTANT coeff8                         : signed(15 DOWNTO 0) := to_signed(26, 16); -- sfix16_En15
  CONSTANT coeff9                         : signed(15 DOWNTO 0) := to_signed(5776, 16); -- sfix16_En15
  CONSTANT coeff10                        : signed(15 DOWNTO 0) := to_signed(52, 16); -- sfix16_En15
  CONSTANT coeff11                        : signed(15 DOWNTO 0) := to_signed(3397, 16); -- sfix16_En15

  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 10); -- sfix16_En15
  SIGNAL product11                        : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL product10                        : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL product9                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL product8                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL product7                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL product5                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL product4                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL product3                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL product2                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL product1                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL sumvector1                       : sumdelay_pipeline_type(0 TO 4); -- sfix40_En30
  SIGNAL add_temp                         : signed(32 DOWNTO 0); -- sfix33_En30
  SIGNAL add_temp_1                       : signed(32 DOWNTO 0); -- sfix33_En30
  SIGNAL add_temp_2                       : signed(32 DOWNTO 0); -- sfix33_En30
  SIGNAL add_temp_3                       : signed(32 DOWNTO 0); -- sfix33_En30
  SIGNAL add_temp_4                       : signed(32 DOWNTO 0); -- sfix33_En30
  SIGNAL sumdelay_pipeline1               : sumdelay_pipeline_type(0 TO 4); -- sfix40_En30
  SIGNAL sumvector2                       : sumdelay_pipeline_type(0 TO 2); -- sfix40_En30
  SIGNAL add_temp_5                       : signed(40 DOWNTO 0); -- sfix41_En30
  SIGNAL add_temp_6                       : signed(40 DOWNTO 0); -- sfix41_En30
  SIGNAL sumdelay_pipeline2               : sumdelay_pipeline_type(0 TO 2); -- sfix40_En30
  SIGNAL sumvector3                       : sumdelay_pipeline_type(0 TO 1); -- sfix40_En30
  SIGNAL add_temp_7                       : signed(40 DOWNTO 0); -- sfix41_En30
  SIGNAL sumdelay_pipeline3               : sumdelay_pipeline_type(0 TO 1); -- sfix40_En30
  SIGNAL sum4                             : signed(39 DOWNTO 0); -- sfix40_En30
  SIGNAL add_temp_8                       : signed(40 DOWNTO 0); -- sfix41_En30
  SIGNAL output_typeconvert               : signed(15 DOWNTO 0); -- sfix16_En10
  SIGNAL output_register                  : signed(15 DOWNTO 0); -- sfix16_En10


BEGIN

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 10) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 10) <= delay_pipeline(0 TO 9);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;


  product11 <= delay_pipeline(10) * coeff11;

  product10 <= delay_pipeline(9) * coeff10;

  product9 <= delay_pipeline(8) * coeff9;

  product8 <= delay_pipeline(7) * coeff8;

  product7 <= delay_pipeline(6) * coeff7;

  product5 <= delay_pipeline(4) * coeff5;

  product4 <= delay_pipeline(3) * coeff4;

  product3 <= delay_pipeline(2) * coeff3;

  product2 <= delay_pipeline(1) * coeff2;

  product1 <= delay_pipeline(0) * coeff1;

  add_temp <= resize(product11, 33) + resize(product10, 33);
  sumvector1(0) <= resize(add_temp, 40);

  add_temp_1 <= resize(product9, 33) + resize(product8, 33);
  sumvector1(1) <= resize(add_temp_1, 40);

  add_temp_2 <= resize(product7, 33) + resize(product5, 33);
  sumvector1(2) <= resize(add_temp_2, 40);

  add_temp_3 <= resize(product4, 33) + resize(product3, 33);
  sumvector1(3) <= resize(add_temp_3, 40);

  add_temp_4 <= resize(product2, 33) + resize(product1, 33);
  sumvector1(4) <= resize(add_temp_4, 40);

  sumdelay_pipeline_process1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumdelay_pipeline1 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sumdelay_pipeline1(0 TO 4) <= sumvector1(0 TO 4);
      END IF;
    END IF; 
  END PROCESS sumdelay_pipeline_process1;

  add_temp_5 <= resize(sumdelay_pipeline1(0), 41) + resize(sumdelay_pipeline1(1), 41);
  sumvector2(0) <= (39 => '0', OTHERS => '1') WHEN (add_temp_5(40) = '0' AND add_temp_5(39) /= '0') OR (add_temp_5(40) = '0' AND add_temp_5(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_5(40) = '1' AND add_temp_5(39) /= '1'
      ELSE (add_temp_5(39 DOWNTO 0));

  add_temp_6 <= resize(sumdelay_pipeline1(2), 41) + resize(sumdelay_pipeline1(3), 41);
  sumvector2(1) <= (39 => '0', OTHERS => '1') WHEN (add_temp_6(40) = '0' AND add_temp_6(39) /= '0') OR (add_temp_6(40) = '0' AND add_temp_6(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_6(40) = '1' AND add_temp_6(39) /= '1'
      ELSE (add_temp_6(39 DOWNTO 0));

  sumvector2(2) <= sumdelay_pipeline1(4);

  sumdelay_pipeline_process2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumdelay_pipeline2 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sumdelay_pipeline2(0 TO 2) <= sumvector2(0 TO 2);
      END IF;
    END IF; 
  END PROCESS sumdelay_pipeline_process2;

  add_temp_7 <= resize(sumdelay_pipeline2(0), 41) + resize(sumdelay_pipeline2(1), 41);
  sumvector3(0) <= (39 => '0', OTHERS => '1') WHEN (add_temp_7(40) = '0' AND add_temp_7(39) /= '0') OR (add_temp_7(40) = '0' AND add_temp_7(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_7(40) = '1' AND add_temp_7(39) /= '1'
      ELSE (add_temp_7(39 DOWNTO 0));

  sumvector3(1) <= sumdelay_pipeline2(2);

  sumdelay_pipeline_process3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumdelay_pipeline3 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sumdelay_pipeline3(0 TO 1) <= sumvector3(0 TO 1);
      END IF;
    END IF; 
  END PROCESS sumdelay_pipeline_process3;

  add_temp_8 <= resize(sumdelay_pipeline3(0), 41) + resize(sumdelay_pipeline3(1), 41);
  sum4 <= (39 => '0', OTHERS => '1') WHEN (add_temp_8(40) = '0' AND add_temp_8(39) /= '0') OR (add_temp_8(40) = '0' AND add_temp_8(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_8(40) = '1' AND add_temp_8(39) /= '1'
      ELSE (add_temp_8(39 DOWNTO 0));

  output_typeconvert <= (15 => '0', OTHERS => '1') WHEN (sum4(39) = '0' AND sum4(38 DOWNTO 35) /= "0000") OR (sum4(39) = '0' AND sum4(35 DOWNTO 20) = "0111111111111111") -- special case0
      ELSE (15 => '1', OTHERS => '0') WHEN sum4(39) = '1' AND sum4(38 DOWNTO 35) /= "1111"
--      ELSE (resize(shift_right(sum4(39) & sum4(35 DOWNTO 0) + ( "0" & (sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20))), 20), 16));
      ELSE (resize(shift_right(sum4(39) & sum4(35 DOWNTO 0) + ( "0" & (sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20) & NOT sum4(20))), 15), 16));

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
